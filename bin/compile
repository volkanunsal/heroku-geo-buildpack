#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Fail fast
set -e

# Debug
# set -x

# Clean up leaking environment
unset GIT_DIR

# Configuration
S3_BUCKET=${HEROKU_GEO_BUILDBACK_S3_BUCKET:-"heroku-buildpack-geo"}

# Parameters
BUILD_DIR=$1
CACHE_DIR="${2}/${STACK}"
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# Setup profile file
PROFILE_PATH="$BUILD_DIR/.profile.d/geo.sh"
mkdir -p $(dirname $PROFILE_PATH)

# Functions
function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function manifest_version() {
  curl "http://${S3_BUCKET}.s3.amazonaws.com/${STACK}/manifest.${1}" -s -o - | head -n 1
}

function download_package() {
  name="$1"
  version="$2"
  location="$3"

  mkdir -p $location
  package="https://${S3_BUCKET}.s3.amazonaws.com/${STACK}/$name-$version.tgz"
  curl $package -s -o - | tar xzf - -C $location
}

function set-env (){
  echo "export $1=$2" >> $PROFILE_PATH
}

function set-default-env (){
  echo "export $1=\${$1:-$2}" >> $PROFILE_PATH
}

# Retrieve versions
GEOS_VERSION=$(manifest_version "geos")
GDAL_VERSION=$(manifest_version "gdal")
PROJ_VERSION=$(manifest_version "proj")

# Display some information
echo "Using geos version: ${GEOS_VERSION}" | indent
echo "Using gdal version: ${GDAL_VERSION}" | indent
echo "Using proj version: ${PROJ_VERSION}" | indent

# Vendor directories
VENDORED_GEOS="vendor/geos/$GEOS_VERSION"
VENDORED_GDAL="vendor/gdal/$GDAL_VERSION"
VENDORED_PROJ="vendor/proj/$PROJ_VERSION"

# Make sure cache dir exists
mkdir -p $CACHE_DIR

if [ ! -d $CACHE_DIR/$VENDORED_GEOS ]; then
  echo "-----> Fetching and vendoring geos"
  rm -rf "$CACHE_DIR/vendor/geos"
  download_package "geos" "${GEOS_VERSION}" "${CACHE_DIR}/${VENDORED_GEOS}"
fi

if [ ! -d $CACHE_DIR/$VENDORED_GDAL ]; then
  echo "-----> Fetching and vendoring gdal"
  rm -rf "$CACHE_DIR/vendor/gdal"
  download_package "gdal" "${GDAL_VERSION}" "${CACHE_DIR}/${VENDORED_GDAL}"
fi

if [ ! -d $CACHE_DIR/$VENDORED_PROJ ]; then
  echo "-----> Fetching and vendoring proj"
  rm -rf "$CACHE_DIR/vendor/proj"
  download_package "proj" "${PROJ_VERSION}" "${CACHE_DIR}/${VENDORED_PROJ}"
fi

TARGET_VENDOR_DIR=".heroku/vendor"
# Copy artifacts out of cache if exists.
for dir in $VENDORED_GEOS $VENDORED_GDAL $VENDORED_PROJ; do
  mkdir -p $BUILD_DIR/$TARGET_VENDOR_DIR
  cp -r $CACHE_DIR/$dir/* $BUILD_DIR/$TARGET_VENDOR_DIR &> /dev/null || true
done

# App directories
APP_VENDOR="/app/$TARGET_VENDOR_DIR"

# Setup environment variables
set-env GEOS_LIBRARY_PATH "$APP_VENDOR/lib"
set-env GDAL_LIBRARY_PATH "$APP_VENDOR/lib"
set-env PROJ4_LIBRARY_PATH "$APP_VENDOR/lib"
set-env GDAL_DATA "$APP_VENDOR/share/gdal"


# Export env var for next build
echo "BUNDLE_BUILD__RGEO=\"--with-geos-dir=/app/.heroku/vendor --with-opt-dir=/app/.heroku/vendor --with-geos-config=/app/.heroku/vendor/bin/geos-config\"" >> $BP_DIR/export
set-default-env BUNDLE_BUILD__RGEO "--with-geos-dir=/app/.heroku/vendor --with-opt-dir=/app/.heroku/vendor --with-geos-config=/app/.heroku/vendor/bin/geos-config"
set-default-env LIBRARY_PATH "$APP_VENDOR/lib"
set-default-env LD_LIBRARY_PATH "$APP_VENDOR/lib"
set-default-env CPATH "$APP_VENDOR/include"
set-default-env PATH "$APP_VENDOR/bin"

echo "-----> Vendoring geo libraries done"
